"""
Django settings for djangostart project.

Generated by 'django-admin startproject' using Django 1.11.20.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# C:/Users......./djangostart 项目的根目录

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'q126%o6f39!h1rc#4upf(bz%*%sb9n83(#(r9p9wcp($9za!km'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 应用创建之后，记得加到这里来！！！！
    'app01',
    'apps.route_base',
    'apps.route_resolve',
    'apps.django_templates',
    'apps.forms_base',
    'apps.forms_auth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'djangostart.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 指定去DIRS列表中所写的目录下查找html文件
        'DIRS': [os.path.join(BASE_DIR, "templates")],
        # 是否去INSTALLED_APPS的应用的templates目录下查找html文件
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # 所有的路由都会执行上下文处理器 => 返回的内容都会被传递到模板 =
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangostart.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

# # MySQL配置
# DATABASES = {
# 	'default': {
# 	'ENGINE': 'django.db.backends.mysql',
# 	'NAME': 'myblog02',   # 数据库名
# 	'USER': 'root',       # 连接用户名
# 	'PASSWORD': '12345',  # 密码
# 	'HOST': '192.168.137.200',    # 主机
# 	'PORT': '3306',               # 端口
# 	'OPTIONS': {
# 		'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
# 	},
# }
# 安装pymysql模块

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-Hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

# 如果一个url是以STATIC_URL开头，那么它就去STATICFILES_DIRS指定的目录下去查找文件
STATIC_URL = '/href/'  # 路由正则匹配
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# STATIC_ROOT 用来收集所有app的静态文件，放到这个目录下，这一项的目录不要与STATICFILES_DIRS重名
STATIC_ROOT = os.path.join(BASE_DIR, "static_collect")
# python manage.py collectstatic
"""
html 
/static/xxxxx.js
"""